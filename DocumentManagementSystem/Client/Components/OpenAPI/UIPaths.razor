@using DocumentManagementSystem.Shared.OpenApi;

<section class="block col-12 block-desktop col-12-desktop">
    <div>
        @if (Paths is not null)
        {
            @foreach (var controller in APIs.Values)
            {
                <div class="opblock-tag-section is-open">
                    <h4 class="opblock-tag no-desc">
                        <a>
                            <span>@controller.Name</span>
                        </a>
                        <small />
                        <UIButton Rotate="180" IsOpen=@controller.IsOpen />
                    </h4>
                </div>
            }
        }
    </div>
</section>

@code {
    [Parameter] public Dictionary<string, PathItem>? Paths { get; set; }
    Dictionary<string, Controller> APIs;

    protected override void OnInitialized()
    {
        if (Paths is not null && Paths.Count > 0)
        {
            APIs = new();

            foreach (var path in Paths)
            {
                #region Post
                if (path.Value.Post is not null)
                {
                    if (!APIs.ContainsKey(path.Value.Post.Tags[0]))
                    {
                        APIs.Add(path.Value.Post.Tags[0], new Controller(path.Value.Post.Tags[0], path.Value));
                        continue;
                    }
                    else
                    {
                        APIs[path.Value.Post.Tags[0]].Action.Add(path.Value);
                    }
                }
                #endregion

                #region Get
                if (path.Value.Get is not null)
                {
                    if (!APIs.ContainsKey(path.Value.Get.Tags[0]))
                    {
                        APIs.Add(path.Value.Get.Tags[0], new Controller(path.Value.Get.Tags[0], path.Value));
                        continue;
                    }
                    else
                    {
                        APIs[path.Value.Get.Tags[0]].Action.Add(path.Value);
                    }
                }
                #endregion

                #region Put
                if (path.Value.Put is not null)
                {

                    if (!APIs.ContainsKey(path.Value.Put.Tags[0]))
                    {
                        APIs.Add(path.Value.Put.Tags[0], new Controller(path.Value.Put.Tags[0], path.Value));
                        continue;
                    }
                    else
                    {
                        APIs[path.Value.Put.Tags[0]].Action.Add(path.Value);
                    }
                }
                #endregion

                #region Delete
                if (path.Value.Delete is not null)
                {
                    if (!APIs.ContainsKey(path.Value.Delete.Tags[0]))
                    {
                        APIs.Add(path.Value.Delete.Tags[0], new Controller(path.Value.Delete.Tags[0], path.Value));
                        continue;
                    }
                    else
                    {
                        APIs[path.Value.Delete.Tags[0]].Action.Add(path.Value);
                    }
                }
                #endregion
            }
        }
    }

    struct Controller
    {
        public Controller(string name, PathItem pathItem)
        {
            Name = name;
            IsOpen = true;
            Action = new() { pathItem };
        }

        /// <summary>
        /// Название контроллера
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// Флаг, инфа о контроллере открыта
        /// </summary>
        public bool IsOpen { get; set; }
        /// <summary>
        /// Список действий
        /// </summary>
        public List<PathItem> Action { get; set; }
    }
}
