@page "/viewing/{Code}"
@using DocumentManagementSystem.Client.Components.OpenAPI
@using DocumentManagementSystem.Client.Components
@using DocumentManagementSystem.Shared.OpenApi
@using DocumentManagementSystem.Client.Constants
@using System.Text.Json
@using System.Net
@using DocumentManagementSystem.Shared.Responses
@inject NavigationManager _navigation
@inject IHttpClientFactory _httpClientFactory

<PageTitle>Просмотр</PageTitle>

@if (error is not null)
{
    <div>
        <EmptyPage Text="@error" TextColor="red" />
    </div>
    <br>
}
else
{
    @if (download)
    {
        <p style="text-align: center;"><em>загрузка...</em></p>
    }
    else
    {
        <UIRoot Document="@Document.Document" URL="@url" />
    }
}


@code {
    [Parameter]
    public string? Code { get; set; }

    DocumentResponse? Document { get; set; }
    string? url;
    string? error { get; set; }
    HttpClient client;
    bool download { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Code))
        {
            error = "Не указан код документации";
            return;
        }

        client = _httpClientFactory.CreateClient("Api");

        url = client.BaseAddress + $"Document?Code={Code}";

        var response = await client.GetAsync(url);

        switch (response.StatusCode)
        {
            case HttpStatusCode.NotFound:
                error = "Документация не найдена";
                return;
            case HttpStatusCode.BadRequest:
                error = "Ошибка загрузки документации";
                return;
            case HttpStatusCode.MethodNotAllowed:
                error = "Метод не поддерживается";
                return;
        }

        Document = await JsonSerializer.DeserializeAsync<DocumentResponse>(response.Content.ReadAsStream(), SystemConstants.JSONSerializerOptions);

        if (Document is null)
            error = "Ошибка загрузки документации";

        download = false;
    }
}

