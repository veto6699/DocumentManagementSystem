@page "/login"
@using System.Text.RegularExpressions
@using DocumentManagementSystem.Client.Components.Redirect
@using DocumentManagementSystem.Client.Constants
@using DocumentManagementSystem.Shared.Requests
@using System.Net
@using DocumentManagementSystem.Shared.Responses
@using System.Text.Json
@inject AuthenticationStateProvider _provider
@inject IHttpClientFactory _httpClientFactory
@inject NavigationManager _navigation

<PageTitle>Вход</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <div class="page-title">
            <h2>Вход</h2>
        </div>

        <div>
            <div class="wrapper">
                <div class="registration-form">
                    @if (errors is not null)
                    {
                        <div>
                            @foreach (var error in errors)
                            {
                                <p style="color:red">@error</p>
                            }
                        </div>
                        <br>
                    }
                    <div>
                        <label>Электронная почта</label>
                        <br />
                        <input type="email" inputmode="text" autocomplete="email" @bind-value="@email" @bind-value:event="oninput">
                    </div>
                    <div>
                        <label>Пароль</label>
                        <br />
                        <input type="password" inputmode="text" autocomplete="current-password" @bind-value="@password" @bind-value:event="oninput">
                    </div>
                    <button class="registration-button" @onclick="UserLogin">
                        <span class="button-in">
                            <span class="button-content">Войти</span>
                        </span>
                    </button>
                </div>
            </div>
        </div>
    </NotAuthorized>
    <Authorized>
        <RedirectToIndex />
    </Authorized>
</AuthorizeView>

@code {
    string? email { get; set; }
    string? password { get; set; }

    List<string>? errors { get; set; }
    HttpClient client;

    async Task UserLogin()
    {
        List<string>? error = new();

        if (!string.IsNullOrWhiteSpace(email))
        {
            string pattern = @"^(?!\.)(""([^""\r\\]|\\[""\r\\])*""|" + @"([-a-z0-9!#$%&'*+/=?^_`{|}~]|(?<!\.)\.)*)(?<!\.)" + @"@[a-z0-9][\w\.-]*[a-z0-9]\.[a-z][a-z\.]*[a-z]$";
            var regex = new Regex(pattern, RegexOptions.IgnoreCase);

            if (!regex.IsMatch(email))
                error.Add("Невалидная почта");
        }
        else
            error.Add("Почта не заполнена");

        if (string.IsNullOrWhiteSpace(password))
            error.Add("Пароль не заполнен");

        if (error.Count > 0)
        {
            errors = error;
            return;
        }

        var login = JsonContent.Create(new LoginRequest() { Email = email, Password = password });

        var response = await client.PostAsync(client.BaseAddress + "Authentication/Login", login);

        switch (response.StatusCode)
        {
            case HttpStatusCode.NotFound:
                error.Add("API не найден");
                break;
            case HttpStatusCode.Forbidden:
            case HttpStatusCode.BadRequest:
                error.Add("Ошибка входа");
                break;
            case HttpStatusCode.MethodNotAllowed:
                error.Add("API не поддерживается");
                break;
            case HttpStatusCode.InternalServerError:
                error.Add("Ошибка сервера");
                break;
        }

        if (error.Count > 0)
        {
            errors = error;
            return;
        }
        else
            errors = null;

        LoginResponse loginResponse = await JsonSerializer.DeserializeAsync<LoginResponse>(response.Content.ReadAsStream(), SystemConstants.JSONSerializerOptions);

        ((AuthStateProvider)_provider).ChangeTokens(loginResponse.AccessToken, loginResponse.RefreshToken);

        _navigation.NavigateTo("/");
    }

    protected override void OnInitialized()
    {
        client = _httpClientFactory.CreateClient("Api");
    }
}
